/**
 * @file MatlabDefinitions.def
 * @brief definitions of implemented Matlab commands 
 * @author Eric Parsonage <eric.parsonage@adelaide.edu.au> 
 * @date 3/09/2012
 */

/*
 *
 *     Copyright 2012 Eric Parsonage <eric.parsonage@adelaide.edu.au>
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *   
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

ExpandForMatlab(LinePickingPDF, 4, 1)
/* LinePickingPDF returns the PDF for the problem. */
/* input argument 1: t, a vector of points at which to calculate the PDF */
/* input argument 2: problem, the problem number (See LinePickingPrintAllProblems) */
/* input argument 3: parameters, the parameters of the problem */
/* output argument 1: g, a vector containing the values g(t) of the PDF at the points t */

ExpandForMatlab(LinePickingCDF, 4, 1)
/* LinePickingCDF returns the CDF for the problem. */
/* input argument 1: t, a vector of points at which to calculate the CDF */
/* input argument 2: problem, the problem number (See LinePickingPrintAllProblems) */
/* input argument 3: parameters, the parameters of the problem */
/* output argument 1: G, a vector containing the values G(t) of the CDF at the points t */

ExpandForMatlab(LinePickingMean, 3, 1)
/* LinePickingMean returns the mean of the distribution. */
/* input argument 1: problem, the problem number (See LinePickingPrintAllProblems) */
/* input argument 2: parameters, the parameters of the problem */
/* output argument 1: mean, the mean of the distribution. */

ExpandForMatlab(LinePickingVar, 3, 1)
/* LinePickingVar returns the variance of the distribution. */
/* input argument 1: problem, the problem number (See LinePickingPrintAllProblems) */
/* input argument 2: parameters, the parameters of the problem */
/* output argument 1: var, the variance of the distribution. */

ExpandForMatlab(LinePickingSupport, 3, 1)
/* input argument 1: problem, the problem number (See LinePickingPrintAllProblems) */
/* input argument 2: parameters, the parameters of the problem */
/* output argument 1: support, a 1x2 vector containing the [min,max] support of the PDF. */


ExpandForMatlab(LinePickingProblemLookup, 2, 2)
/* LinePickingProblemLookup checks if a particular problem exists, and returns information about it.*/
/* input argument 1: problem, the problem number (See LinePickingPrintAllProblems) */
/* output argument 1: name, the name of the problem */
/* output argument 2: description, a brief description of the problem */

ExpandForMatlab(LinePickingPrintAllProblems, 1, 0)
/* LinePickingPrintAllProblems prints out the list of implemented problems. */

 
ExpandForMatlab(LinePickingCheckParameters, 3, 2)
/*  LinePickingCheckParameters checks if the supplied parameters are correct*/
/* input argument 1: problem, the problem number (See LinePickingPrintAllProblems) */
/* input argument 2: parameters, the parameters of the problem */
/* output argument 1: result, an integer error code */
/* output argument 2: error_str, gives a message explaining the error */

ExpandForMatlab(LinePickingAllProblems, 1, 2) 
/* LinePickingAllProblems returns information about the problems. */
/* output argument 1: names, a cell array of problem names */
/* output argument 2: descriptions, a cell array of brief descriptions of each problem */


ExpandForMatlab(LinePickingNumberOfProblems, 1, 1) 
/* LinePickingNumberOfProblems returns the number of implemented problems. */
/* output argument 1: no_of_problems, the number of implemented problems */

ExpandForMatlab(LinePickingSimPoints, 5, 1) 
/* LinePickingSimPoints simulates a set of points from the particular problem.*/
/* input argument 1: Npoints, the number of points to simulate */
/* input argument 2: problem, the problem number (See LinePickingPrintAllProblems) */
/* input argument 3: parameters, the parameters of the problem */
/* input argument 4: seed, the seed to the random number generator */
/* output argument 1: points, returns a Ncoords x Npoints array containing the simulated points */

ExpandForMatlab(LinePickingSimDistances, 5, 1) 
/* LinePickingSimDistances simulates a set of distances for a problem. */
/* input argument 1: N, the number of distances to simulate */
/* input argument 2: problem, the problem number (See LinePickingPrintAllProblems) */
/* input argument 3: parameters, the parameters of the problem */
/* input argument 4: seed, the seed to the random number generator */
/* output argument 1: distances, returns a vector of the simulated distances */
