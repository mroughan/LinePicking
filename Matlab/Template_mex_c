/* _BASE_.c	
 *
 *   This file was autogenerated by _VERSION_,
 *                               on _DATE_
 *
 *
_LICENSE_
 * 
 */

#include <math.h>
#include <stdlib.h>
#include <stdint.h> 
#include <string.h>
#include <stdio.h>
#include <unistd.h>
#include "_BASE_MEX.h" /* prototypes for the MEX gateway functions */
#include "_BASE_.h"    /* prototypes for the C functions */
#include "mex.h"
#include "matrix.h"



/* if we fail this we exit with a message */
void CheckNumberInputArg(int nrhs, int required, char* entry_str)
{
    char buffer[256];
    
    if (nrhs == required) return;
    sprintf(buffer,
            "\n%s entry point: requires exactly %d input parameter(s).",
            entry_str, required);
    mexErrMsgTxt(buffer);  
}


/* if we fail this we exit with a message */
void CheckNumberOutputArg(int nlhs, int max, char* entry_str)
{
    char buffer[256];
    
    if (nlhs <= max) return;
    sprintf(buffer,
            "\n%s entry point: requires at most %d output parameter(s), "
            "%d were provided",
            entry_str, max, nlhs);
    mexErrMsgTxt(buffer);  
}

/* if we fail this we exit with a message */            
void CheckProblem(int problem, char* entry_str)
{
    char buffer[256];
    if (problem < 0 || problem >= NUMBER_OF_PROBLEMS) 
    {
        sprintf(buffer, 
                "\n%s entry point: "
                "the problem %d is unsupported.", 
                entry_str, problem);
        
        mexErrMsgTxt(buffer);  
    }
}

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
    int cmd;
    char buffer[256] = "";
    int result;
    char *error_str;
        
    if (nrhs < 1)
        mexErrMsgTxt("_BASE_ needs at least one input parameter.");
    
    cmd = (int) mxGetScalar(prhs[0]);
    
    /* 
     * The first parameter is an integer 
     * indicating which function should be called 
     * i.e., which entry point to use.
     */
    
    if (cmd < 0 || cmd >= NUMBER_OF_MATLAB_CMDS) 
    {
        sprintf(buffer, "\nEntry point: %d is unsupported.", cmd);
        mexErrMsgTxt(buffer);  
    }
    
    /*
     * Check the number of input and output arguments 
     * we have been passed from Matlab.
     */
    
    CheckNumberInputArg(nrhs, MatlabCallList[cmd].InputArgs, 
                        MatlabCallList[cmd].MatlabCmdName);
    CheckNumberOutputArg(nlhs, MatlabCallList[cmd].OutputArgs, 
                         MatlabCallList[cmd].MatlabCmdName); 
    
    /* 
     * The entry point exists and the number of input and output args 
     * are consistent with entries in MatlabCallList. Clear any 
     * existing errors and call the implementation.
     */
    
    result = 0;
    
    (*MatlabCallList[cmd].CMD)(nlhs, plhs, nrhs, prhs, &result, 
                               &error_str, cmd);
    
    if (result != 0) 
        mexErrMsgTxt(error_str);
}
