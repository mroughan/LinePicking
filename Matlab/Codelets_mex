# file defines "codelets", which are little blocks of code from
# which to construct Matlab MEX functions
#
# each "CODELET" corresponds to a particular type of block refered 
# to in make_mex.pl
#   -- the main block of code is just written
#   -- the VARIABLES block is added to the variables list to be included in the function
#
# each $variable is a perl variable created in make_mex.pl
#    variables are replaced into the code block
#    note that some variables are notionally inputs the define, but this is 
#       purely for convenience, to make sure these are set correctly, 
#       these are not functions, and all $variables, refer to what are
#       effectively globals variables
#    there is no checking that the generated code is reasonable, or that assumptions
#    are correct.
#
# current variables:
#   $function_name is the name of the current C function
#
#   $arg_n is the number of an argument
#      note that argument 0 is reserved for registering the entry point
#      so these start from 1, and numbering matches those of arguments in
#      functions created by make_gateways.pl, i.e., the 1st argument of the
#      C function is labelled 1, and so on
#
#   $arg is shorthand for $argument{$function_name}{$arg_n}
#
#   $type is shorthand for $types{$function_name}{$arg_n}
#
#   $var_list{$function_name} is a list (in C-syntax) of the
#      variables needed by a function to support its input and output
#      arguments. It is created by instantiating the VARIABLES block
#      of each required CODELET
#
#   $fn_desc{$function_name} is a brief (one line) description of the function
#
#
#   $desc{$function_name}{$arg_n} is a brieft (one line) description of the argument
#
#   $
#
#   $
#
#
#
# current_code_blocks
#    FUNCTION_START
#    FUNCTION_END
#    INPUT_SCALAR
#    INPUT_STRING
#    INPUT_1D_ARRAY (of int or double)
#    INPUT_2D_ARRAY (of int or double)
#    OUTPUT_SCALAR
#    OUTPUT_STRING
#    OUTPUT_1D_ARRAY (of int or double)
#    OUTPUT_2D_ARRAY (of int or double)
#
# could add support other data types, or in-place variables
#

# create the start of the a MEX function
CODELET FUNCTION_START($function_name)

void mex_FUNCTION_(int nlhs, mxArray *plhs[], 
                   int nrhs, const mxArray *prhs[],
		   int *result, char **error_str, int cmd)
{
/*mex_${function_name} calls $function_name,  $fn_desc{$function_name} */
/*    This function was automagically generated by $version on $today. */
/*    Edit by hand at your peril! */

    int i,j; /* counters to be used where needed */
    double tmp; /* a place to store temporary values */
    void *tmp_ptr; /* a place to store temporary pointers */
    char buffer[256]; /* a place to store temporary strings, up to 255 chars in length */

    /* variables for input and output arguments */
$var_list{$function_name}

ENDCODELET

# finish off the a MEX function
CODELET FUNCTION_END($function_name)

    /* run the C function */
    C_FUNCTION_CALL
} /* end mex_FUNCTION_ */

ENDCODELET

# create the code needed for inputting a scalar
CODELET INPUT_SCALAR($function_name, $arg_n, $arg, $type, $default)
    /* input parameter $arg_n = $arg, $desc{$function_name}{$arg_n} */

    /* check the argument exists, or create a default value for the argument, if a default is defined */

    $arg = ($type) mxGetScalar(prhs[$arg_n]);

VARIABLES
    $type $arg;
ENDCODELET


# create the code needed for inputting a string
CODELET INPUT_STRING($function_name, $arg_n, $arg, $type, $default)
    /*
     * input parameter $arg_n = $arg, $desc{$function_name}{$arg_n} */
     */

    /* check the argument exists, or create a default value for the argument, if a default is defined */

    /* check it is an char string */
    if (mxIsChar(prhs[$arg_n]) != 1 || mxGetM(prhs[$arg_n]) != 1)
    {
        sprintf(error_buffer, 
                "$function_name: Input $arg_n must be a row array of chars.", 
                MatlabCallList[cmd].MatlabCmdName);
        mexErrMsgTxt(error_buffer);
    }

    /* create a local string, and copy the values */
    ${arg}_len = mxGetN(prhs[$arg_n]) + 1;
    ${arg} = mxCalloc(${arg}_len, sizeof(char));
    ${arg}_status = mxGetString(prhs[$arg_n], ${arg}, ${arg}_len);
    if (${arg}_status != 0) 
	mexWarnMsgTxt("Not enough space. String is truncated.");

VARIABLES
    char *${arg}
    int ${arg}_len, ${arg}_status;
ENDCODELET


# create the code needed for inputting 1D array (of doubles or integers)
CODELET INPUT_1D_ARRAY($function_name, $arg_n, $arg, $type)

VARIABLES
ENDCODELET

# create the code needed for inputting a 2D array (of doubles or integers)
CODELET INPUT_2D_ARRAY

VARIABLES
ENDCODELET

# create the code needed for outputting a scalar (double or integer)
CODELET OUTPUT_SCALAR

VARIABLES
ENDCODELET

# create the code needed for outputting a string
CODELET OUTPUT_STRING

VARIABLES
ENDCODELET

# create the code needed for outputting a 1D array (of doubles or integers)
CODELET OUTPUT_1D_ARRAY

VARIABLES
ENDCODELET

# create the code needed for outputting a 2D array (of doubles or integers)
CODELET OUTPUT_2D_ARRAY

VARIABLES
ENDCODELET
