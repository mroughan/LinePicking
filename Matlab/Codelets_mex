# This is the file that defines "codelets", which are little blocks of code from
# which to construct Matlab MEX functions
#
# Each "CODELET" corresponds to a particular type of block refered
# to in make_mex.pl
#   -- the main block of code is just written (with variable instantiation
#   -- the VARIABLES block is added to the variables list to be included in the function
#
# The function also contains a perl hash to map between a CODELET block and 
# the regexp to match the function arguments against
#
# Each $variable is a perl variable created in make_mex.pl
#    Variables are replaced into the code block using simple string interpolation
#    in perl. Nothing too fancy. Only variables defined in the perl code can be used
#    (new ones can't be defined here). A list of the main ones is below.
#    Note that the variables listed at the start of a CODELET block are purely for
#    convenience at the moment -- they aren't parsed yet.
#
#    Note there is no real parsing or checking of code.
#
# current variables:
#   $function is the name of the current C function
#
#   $arg_n is the number of an argument
#      note that argument 0 is reserved for registering the entry point
#      so these start from 1, and numbering matches those of arguments in
#      functions created by make_gateways.pl, i.e., the 1st argument of the
#      C function is labelled 1, and so on
#
#   $arg is shorthand for $argument{$function}{$arg_n}
#
#   $type is shorthand for $types{$function}{$arg_n}
#
#   $var_list{$function} is a list (in C-syntax) of the
#      variables needed by a function to support its input and output
#      arguments. It is created by instantiating the VARIABLES block
#      of each required CODELET
#
#   $fn_desc{$function} is a brief (one line) description of the function
#
#   $desc{$function}{$arg_n} is a brieft (one line) description of the argument
#
#   $input_arguments{$function} is the collection of code blocks to create
#          the functions input arguments
#
#   $output_arguments{$function} is the collection of code blocks to create
#          the functions output arguments
#
#   $arg_list{$function} is the list of function arguments in C syntax
#
#
# current_code_blocks
#    FUNCTION
#    FUNCTION_H
#    INPUT_SCALAR
#    INPUT_STRING
#    INPUT_1D_ARRAY (of int or double)
#    INPUT_2D_ARRAY (of int or double)
#    OUTPUT_SCALAR
#    OUTPUT_STRING
#    OUTPUT_1D_ARRAY (of int or double)
#    OUTPUT_2D_ARRAY (of int or double)
#
# could add support other data types, or in-place variables
#

# code to execute related to the CODELETS below
MATCH
  $indent = "    ";
  # create struct to map between the C-code codelets function arguments, and the codelets
  @supported_types = ('double', 'int'); # list of types that are used in numerical arrays
  $st = join('|', @supported_types);
  @codelet_name = (
		   'STRING',   # includes INPUT_STRING, OUTPUT_STRING
		   'SCALAR',   # includes INPUT_1D_ARRAY, OUTPUT_1D_ARRAY and
		               #    INPUT_SCALAR, OUTPUT_SCALAR
                               #    note we can't tell the difference between a
                               #    scalar and a vector just by function prototype
		               #    we tell the difference by looking for a length arg.
		   '2D_ARRAY', # includes INPUT_2D_ARRAY, OUTPUT_2D_ARRAY
		  );
  @codelet_regexp = (
		     "char\s*\*\*",
		     "($st)\s*\*",
		     "($st)\s*\*\*",
		    );
  print "show the eval is working\n";
ENDBLOCK


# create the start of the a MEX function
CODELET FUNCTION($function)

/*mex${function} calls $function,  $fn_desc{$function} */
void mex${function}(int nlhs, mxArray *plhs[], 
                    int nrhs, const mxArray *prhs[],
		    int *result, char **error_str, int cmd)
{
/*    This function was automagically generated by $version
      on $today.
      Edit by hand at your peril!
 */

    int i,j; /* counters to be used where needed */
    double tmp; /* a place to store temporary values */
    void *tmp_ptr; /* a place to store temporary pointers */
    char buffer[256]; /* a place to store temporary strings, up to 255 chars in length */

    /* variables for input and output arguments */
$var_list{$function}

    /* input arguments */
$input_arguments{$function}

    /* output arguments */
$output_arguments{$function}

    /* run the C function */
    $function($arg_list{$function});

} /* end mex${function} */

ENDBLOCK


# create the start of the a MEX function prototype
CODELET FUNCTION_H($function)
void mex${function}(int nlhs, mxArray *plhs[], 
                     int nrhs, const mxArray *prhs[],
		     int *result, char **error_str, int cmd);

ENDBLOCK


# create the code needed for inputting a scalar
CODELET INPUT_SCALAR($function, $arg_n, $arg, $type, $default)
    /* input parameter $arg_n = $arg, $desc{$function}{$arg_n} */
    *$arg = ($type) mxGetScalar(prhs[$arg_n]);

VARIABLES
    $type *$arg;
ENDBLOCK


# create the code needed for inputting a string
CODELET INPUT_STRING($function, $arg_n, $arg, $type, $default)
    /*
     * input parameter $arg_n = $arg, $desc{$function}{$arg_n} */
     */

    /* check argument is an char string */
    if (mxIsChar(prhs[$arg_n]) != 1 || mxGetM(prhs[$arg_n]) != 1)
    {
        sprintf(error_buffer, 
                "$function: Input $arg_n must be a row array of chars.", 
                MatlabCallList[cmd].MatlabCmdName);
        mexErrMsgTxt(error_buffer);
    }

    /* create a local string, and copy the values */
    ${arg}_len = mxGetN(prhs[$arg_n]) + 1;
    ${arg} = mxCalloc(${arg}_len, sizeof(char));
    ${arg}_status = mxGetString(prhs[$arg_n], ${arg}, ${arg}_len);
    if (${arg}_status != 0) 
	mexWarnMsgTxt("Not enough space. String is truncated.");

VARIABLES
    char *${arg}
    int ${arg}_len, ${arg}_status;
ENDBLOCK


# create the code needed for inputting 1D array (of doubles or integers)
CODELET INPUT_1D_ARRAY($function, $arg_n, $arg, $type)
  some code
VARIABLES
  $type *$arg;
ENDBLOCK

# create the code needed for inputting a 2D array (of doubles or integers)
CODELET INPUT_2D_ARRAY
  some code
VARIABLES
  $type **$arg;
ENDBLOCK

# create the code needed for outputting a scalar (double or integer)
CODELET OUTPUT_SCALAR

VARIABLES

ENDBLOCK

# create the code needed for outputting a string
CODELET OUTPUT_STRING

VARIABLES

ENDBLOCK

# create the code needed for outputting a 1D array (of doubles or integers)
CODELET OUTPUT_1D_ARRAY

VARIABLES

ENDBLOCK

# create the code needed for outputting a 2D array (of doubles or integers)
CODELET OUTPUT_2D_ARRAY

VARIABLES

ENDBLOCK
